#!/usr/bin/env node
'use strict';

const pug = require('pug');
const fn = pug.compileFile('includes/pug/articleTemplate.pug');
const makeLS = pug.compileFile('includes/pug/ls.pug');
const makeGrep = pug.compileFile('./includes/grep.pug');
const md = require('marked');
const { existsSync, promises } = require('fs');
const { readdir, readFile, writeFile } = promises;
const { MDArticle } = require('../lib/mdarticle');

const inDir = './articles/';
const lsOut = './docs/ls.html';

const ignoreIf = ['untitled', 'wip'];

run();

async function run() {
  const mdFiles = await getMDs(inDir);
  const files = [];
  const existingFiles = [];
  const searchData = [];
  for (let f of mdFiles) {
    let article = new MDArticle({ path: `${inDir}${f}`});
    article.parse();
    const e_p = !existsSync(article.file.fullPathOut) && article.isPublished();

    if (article.isPublished()) {
      let obj = article.genSearch();
      searchData.push(obj);
    }

    let file = article.generateFile();

    if (article.publishArticle() || article.updateArticle() || e_p) {
      if (article.publishArticle()) {
        article.markPublished();
      } else if (article.updateArticle()){
        article.markUpdated();
      }

      files.push(file);
    } else if (article.isPublished()) {
      existingFiles.push(file);
    }
  }

  for (let file of files) {
    await process(file);
  }

  const allFiles = files.concat(existingFiles);

  const grepHTML = makeGrep({ searchData });

  const lsHTML = makeLS({
    articles: allFiles.sort((a, b) => {
      let aD = new Date(a.published);
      let bD = new Date(b.published);
      return bD - aD;
    })
  });

  await writeFile(lsOut, lsHTML);
  await writeFile('./docs/grep.html', grepHTML);
  await writeFile('./articles.json', JSON.stringify(allFiles, null, 2));
  await writeFile('./docs/search.json', JSON.stringify(searchData, null, 2));
}

async function getMDs(dir) {
  const files = await readdir(dir);
  return files
    .filter(f => /\.md$/.test(f))
    .filter(ignored);
}

function ignored(fileName) {
  let ret = true;
  for (let isIgnored of ignoreIf) {
    let re = new RegExp(`${isIgnored}`, 'i');
    if (re.test(fileName)) {
      ret = false;
    }
  }
  return ret;
}

async function process(file) {
  let contents = await readFile(file.fullPathIn, 'utf-8');
  let blargh = fn({
    title: file.title,
    article: md(contents),
    articleLink: file.fullPathOut
  });
  let article = blargh.replace(/<!--.*-->/g, '');
  await writeFile(file.fullPathOut, article);
}
