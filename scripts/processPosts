#!/usr/bin/env node
'use strict';

const pug = require('pug');
const fn = pug.compileFile('includes/pug/postTemplate.pug');
const makeLS = pug.compileFile('includes/pug/ls.pug');
const makeGrep = pug.compileFile('./includes/grep.pug');
const md = require('marked');
const { stat, readdir, readFile, writeFile } = require('fs').promises;
const { MDArticle } = require('../lib/MDArticle');

const inDir = './posts/';
const outDir = './docs/posts/';
const lsOut = './docs/ls.html';

const ignoreIf = ['untitled', 'wip'];

run();

async function run() {
  const mdFiles = await getMDs(inDir);
  const stats = await getStats(mdFiles);
  const files = [];
  const searchData = [];
  let i = 0;
  for (let f of mdFiles) {
    let parser = new MDArticle({ path: `${inDir}${f}`});
    parser.parse();
    searchData.push(parser.genSearch());
    let file = {
      in: `${inDir}${f}`,
      out: `${outDir}${f.replace(/\.md$/, '.html')}`,
      link: `${outDir.replace('./docs/', '')}${f.replace(/\.md$/, '.html')}`,
      title: `${f.replace(/\.md$/, '').replace(/_/g, ' ')}`,
      created: stats[i].created,
      modified: stats[i].modified,
      synopsis: md(parser.data.synopsis)
    };
    files.push(file);
  }

  for (let file of files) {
    await process(file);
  }

  const grepHTML = makeGrep({ searchData });

  const lsHTML = makeLS({
    posts: files.sort((a, b) => {
      let aD = new Date(a.created);
      let bD = new Date(b.created);
      return bD - aD;
    })
  });
  await writeFile(lsOut, lsHTML);
  await writeFile('./docs/grep.html', grepHTML);

  await writeFile('./posts.json', JSON.stringify(files, null, 2));
  await writeFile('./search.json', JSON.stringify(searchData, null, 2));
}

async function getStats(arr) {
  let ret = [];
  for (let file of arr) {
    ret.push(await stat(`${inDir}${file}`));
  }
  return ret.map(s => {
    return {
      created: s.ctime.toDateString(),
      modified: s.mtime.toDateString()
    };
  });
}

async function getMDs(dir) {
  const files = await readdir(dir);
  return files
    .filter(f => /\.md$/.test(f))
    .filter(ignored);
}

function ignored(fileName) {
  let ret = true;
  for (let isIgnored of ignoreIf) {
    let re = new RegExp(`${isIgnored}`, 'i');
    if (re.test(fileName)) {
      ret = false;
    }
  }
  return ret;
}

async function process(file) {
  let contents = await readFile(file.in, 'utf-8');
  let blargh = fn({
    title: file.title,
    post: md(contents),
    postLink: file.out
  });
  let post = blargh.replace(/<!--.*-->/g, '');
  await writeFile(file.out, post);
}
