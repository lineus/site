#!/usr/bin/env node
'use strict';

const pug = require('pug');
const fn = pug.compileFile('includes/pug/postTemplate.pug');
const makeLS = pug.compileFile('includes/pug/ls.pug');
const md = require('marked');
const { stat, readdir, readFile, writeFile } = require('fs').promises;

const inDir = './posts/';
const outDir = './docs/posts/';
const lsOut = './docs/ls.html';

run();

async function run() {
  const mdFiles = await getMDs(inDir);
  const stats = await getStats(mdFiles);
  const files = mdFiles.map((f, i) => {
    return {
      in: `${inDir}${f}`,
      out: `${outDir}${f.replace(/\.md$/, '.html')}`,
      title: `${f.replace(/\.md$/, '').replace(/_/g, ' ')}`,
      created: stats[i].created,
      modified: stats[i].modified
    };
  });

  for (let file of files) {
    await process(file);
  }

  const lsHTML = makeLS({ posts: files });
  await writeFile(lsOut, lsHTML);
}

async function getStats(arr) {
  let ret = [];
  for (let file of arr) {
    ret.push(await stat(`${inDir}${file}`));
  }
  return ret.map(s => {
    return {
      created: s.ctime.toDateString(),
      modified: s.mtime.toDateString()
    };
  });
}

async function getMDs(dir) {
  const files = await readdir(dir);
  return files.filter(f => /\.md$/.test(f));
}

async function process(file) {
  let contents = await readFile(file.in, 'utf-8');
  let blargh = fn({ title: file.title, post: md(contents) });
  let post = blargh.replace(/<!--[\W\s\w]*-->/g, '');
  await writeFile(file.out, post);
}
