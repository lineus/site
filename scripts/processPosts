#!/usr/bin/env node
'use strict';

const pug = require('pug');
const fn = pug.compileFile('includes/pug/postTemplate.pug');
const makeLS = pug.compileFile('includes/pug/ls.pug');
const makeGrep = pug.compileFile('./includes/grep.pug');
const md = require('marked');
const { readdir, readFile, writeFile } = require('fs').promises;
const { MDArticle } = require('../lib/MDArticle');

const inDir = './posts/';
const outDir = './docs/posts/';
const lsOut = './docs/ls.html';

const ignoreIf = ['untitled', 'wip'];

run();

async function run() {
  const mdFiles = await getMDs(inDir);
  const files = [];
  const searchData = [];
  for (let f of mdFiles) {
    let article = new MDArticle({ path: `${inDir}${f}`});
    article.parse();
    searchData.push(article.genSearch());
    if (article.publishArticle()) {
      article.markPublished();
      let file = {
        in: `${inDir}${f}`,
        out: `${outDir}${f.replace(/\.md$/, '.html')}`,
        link: `${outDir.replace('./docs/', '')}${f.replace(/\.md$/, '.html')}`,
        title: `${f.replace(/\.md$/, '').replace(/_/g, ' ')}`,
        published: article.data.published,
        updated: article.data.updated,
        synopsis: md(article.data.synopsis)
      };
      files.push(file);
    }
  }

  for (let file of files) {
    await process(file);
  }

  const grepHTML = makeGrep({ searchData });

  const lsHTML = makeLS({
    posts: files.sort((a, b) => {
      let aD = new Date(a.published);
      let bD = new Date(b.published);
      return bD - aD;
    })
  });
  await writeFile(lsOut, lsHTML);
  await writeFile('./docs/grep.html', grepHTML);

  await writeFile('./posts.json', JSON.stringify(files, null, 2));
  await writeFile('./search.json', JSON.stringify(searchData, null, 2));
}

async function getMDs(dir) {
  const files = await readdir(dir);
  return files
    .filter(f => /\.md$/.test(f))
    .filter(ignored);
}

function ignored(fileName) {
  let ret = true;
  for (let isIgnored of ignoreIf) {
    let re = new RegExp(`${isIgnored}`, 'i');
    if (re.test(fileName)) {
      ret = false;
    }
  }
  return ret;
}

async function process(file) {
  let contents = await readFile(file.in, 'utf-8');
  let blargh = fn({
    title: file.title,
    post: md(contents),
    postLink: file.out
  });
  let post = blargh.replace(/<!--.*-->/g, '');
  await writeFile(file.out, post);
}
