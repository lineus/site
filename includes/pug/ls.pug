doctype html
html(lang="en")
  head
    title lineus.dev
    include headCommon.pug
  body
    #header
      include logo.pug
      include nav.pug
    include search.pug
    #sort
      span.sortButton(onclick="bydate()") Oldest First
      span.sortButton(onclick="bytitle()") Alphabetical
    #articles
      ul#articleList
        each article in articles
          li.articleListing(class=article.tags.map(t => `tag-${t}`).join(' '))
              a(href=article.link class="article") #{article.title}
              each tag in article.tags
                a(href=`/ls.html?tagged=${tag}`) #{tag}
              span.articlesDate #{article.published}
              
    script.
      const isTagged = /tagged/.test(window.location);
      let tags = [];
      const dateBut = document.querySelector('span.sortButton:first-child');
      const titlBut = document.querySelector('span.sortButton:last-child');
      const list = document.querySelector('#articleList');
      const articles = Array.from(list.childNodes);

      if (isTagged) {
        tags = `${window.location}`.split("=")[1].split(",");
        clearAllarticles()
        tags.map(setVisibleByTag)
      }

      function clearAllarticles() {
        articles.map(article => {
          if (!article.style) {
            return;
          }
          article.style.display = 'none';
        })
      }

      function setVisibleByTag(t) {
        articles.map(article => {
          if (!article.classList) {
            return;
          }
          if(article.classList.contains(`tag-${t}`)) {
            article.style.display = 'flex';
          }
        })
      }

      function replacearticles(arr) {
        while (list.firstChild) {
          list.removeChild(list.firstChild);
        }
        for (let child of arr) {
          list.appendChild(child);
        }
      }

      function bydate() {
        let nodeList = [].concat(articles);
        if (dateBut.innerText === 'Oldest First') {
          dateBut.innerText = 'Newest First';
          nodeList.sort(oldestFirst);
        } else {
          dateBut.innerText = 'Oldest First';
          nodeList.sort(newestFirst);
        }
        replacearticles(nodeList);
      }

      function bytitle() {
        let nodeList = [].concat(articles);
        if (titlBut.innerText === 'Alphabetical') {
          titlBut.innerText = 'Reverse Alpha';
          nodeList.sort(alpha);
        } else {
          titlBut.innerText = 'Alphabetical';
          nodeList.sort(revAlpha);
        }
        replacearticles(nodeList);
      }

      function oldestFirst(a,b) {
        let aEl = a.querySelector('span.articlesDate');
        let bEl = b.querySelector('span.articlesDate');
        let aD = new Date(aEl.innerText);
        let bD = new Date(bEl.innerText);
        return aD - bD;
      }

      function newestFirst(a,b) {
        let aEl = a.querySelector('span.articlesDate');
        let bEl = b.querySelector('span.articlesDate');
        let aD = new Date(aEl.innerText);
        let bD = new Date(bEl.innerText);
        return bD - aD;
      }

      function alpha(a,b) {
        let aT = a.querySelector('a').innerText;
        let bT = b.querySelector('a').innerText;
        if (aT > bT) {
          return 1;
        }
        return -1
      }

      function revAlpha(a,b) {
        let aT = a.querySelector('a').innerText;
        let bT = b.querySelector('a').innerText;
        if (aT < bT) {
          return 1;
        }
        return -1
      }
    #footer
      include footer.pug